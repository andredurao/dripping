{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["updateLocalStorage","frequency","localStorage","setItem","App","useState","getItem","parseInt","fetchLocalStorage","setFrequency","dripping","setDripping","intervalID","setIntervalID","audio","Audio","beep","play","className","style","type","disabled","onClick","clearInterval","undefined","then","pause","setInterval","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sNAGA,SAASA,EAAmBC,GAC1BC,aAAaC,QAAQ,oBAAqBF,GA0E7BG,MA9Df,WAAe,MAEqBC,mBAXpC,WACE,IAAIJ,EAAYC,aAAaI,QAAQ,qBACrC,OAAOL,EAGEM,SAASN,GAFT,GAQkCO,IAF9B,mBAENP,EAFM,KAEKQ,EAFL,OAGmBJ,oBAAS,GAH5B,mBAGNK,EAHM,KAGIC,EAHJ,OAIuBN,qBAJvB,mBAINO,EAJM,KAIMC,EAJN,KAKPC,EAAQ,IAAIC,MAAM,cAyBlBC,EAAO,WACXF,EAAMG,QAUR,OACE,qBAAKC,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UACE,qBAAKA,UAAU,iBAAf,SA1BGR,GAAY,qBAAKQ,UAAU,OAAOC,MAAO,CAAC,qBAAqB,GAArB,OAAyB,GAAOlB,EAAhC,MAA9B,iBA6Bf,sBAAKiB,UAAU,gBAAf,UACE,oBAAGA,UAAU,OAAb,UACGjB,EADH,uBAGA,wBAAQmB,KAAK,SAASF,UAAU,YAAYG,SAAUX,EAAUY,QA3B9C,WACpBrB,EAAY,IACdD,EAAmBC,EAAU,GAC7BQ,EAAaR,EAAU,KAwBnB,eACA,wBAAQmB,KAAK,SAASF,UAAU,YAAYG,SAAUX,EAAUY,QAhC9C,WACxBtB,EAAmBC,EAAU,GAC7BQ,EAAaR,EAAU,IA8BjB,kBAEF,qBAAKiB,UAAU,gBAAf,SACE,wBAAQE,KAAK,SAASF,UAAU,eAAeI,QAjDnC,YAClBX,GAAaD,GACTA,IACFa,cAAcX,GACdC,OAAcW,KAEdV,EAAMG,OAAOQ,MAAK,kBAAMX,EAAMY,YAE3Bd,GAAcC,EAAcc,YAAYX,EADzB,GAAOf,EAAa,QA0ClC,SAhBCS,EAAW,cAAW,+BC3ClBkB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBL,MAAK,YAAkD,IAA/CM,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.d9e72139.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\n\nfunction updateLocalStorage(frequency) {\n  localStorage.setItem('drippingFrequency', frequency);\n}\n\nfunction fetchLocalStorage() {\n  let frequency = localStorage.getItem('drippingFrequency');\n  if (!!!frequency) {\n    return 60; // default value\n  } else {\n    return parseInt(frequency);\n  }\n}\n\nfunction App() {\n  // frequency: rate in drops per minute\n  const [frequency, setFrequency] = useState(fetchLocalStorage());\n  const [dripping, setDripping] = useState(false);\n  const [intervalID, setIntervalID] = useState();\n  const audio = new Audio('./beep.mp3');\n  const invertState = () => {\n    setDripping(!dripping);\n    if (dripping) {\n      clearInterval(intervalID);\n      setIntervalID(undefined);\n    } else {\n      audio.play().then(() => audio.pause());\n      const duration = (60.0 / frequency) * 1000.0;\n      !!!intervalID && setIntervalID(setInterval(beep, duration));\n    }\n  }\n  const drop = () => {\n    return dripping && <div className='drop' style={{'animation-duration': `${60.0 / frequency}s`}}> </div>;\n  }\n  const increaseFrequency = () => {\n    updateLocalStorage(frequency+1);\n    setFrequency(frequency+1);\n  }\n  const decreaseFrequency = () => {\n    if (frequency > 0){\n      updateLocalStorage(frequency-1);\n      setFrequency(frequency-1);\n    }\n  }\n  const beep = () => {\n    audio.play();\n  };\n  const startBeep = () => {\n    audio.play().then(() => audio.pause());\n    const duration = (60.0 / frequency) * 1000.0;\n    !!!intervalID && setIntervalID(setInterval(beep, duration));\n  }\n  const buttonLabel = () => {\n    return dripping ? 'Stop ⏹' : 'Start ▶️';\n  }\n  return (\n    <div className='App'>\n      <header className='App-header'>\n        <div className='drip-container'>\n          { drop() }\n        </div>\n        <div className='control-panel'>\n          <p className='text'>\n            {frequency} drops per minute\n          </p>\n          <button type='button' className='frequency' disabled={dripping} onClick={decreaseFrequency}>-</button>\n          <button type='button' className='frequency' disabled={dripping} onClick={increaseFrequency}>+</button>\n        </div>\n        <div className='control-panel'>\n          <button type='button' className='start-button' onClick={invertState}>{buttonLabel()}</button>\n        </div>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}